import cv2
from os import listdir
from os.path import isfile, join
import numpy
from pygame import mixer

mixer.init()
sound = mixer.Sound('alarm.wav')

eye_Cascade = cv2.CascadeClassifier('haarcascade_eye_tree_eyeglasses.xml')
face_Cascade = cv2.CascadeClassifier('haarcascade_frontalface_alt.xml')


while 1:
    vidObj = cv2.VideoCapture(0)
    counter = 0
    success = 1

    def getFrame(sec):

        vidObj.set(cv2.CAP_PROP_POS_MSEC, sec * 1000)
        hasFrames, img = vidObj.read()
        #image = cv2.rotate(img, cv2.ROTATE__CLOCKWISE)

        if hasFrames:
            cv2.imwrite("folder path to store frames generated from live video" , img)
            return hasFrames

    count_frames = 1
    frameRate = 0.2
    sec = 0
    success_frames = getFrame(sec)
    while success_frames:
        count_frames = count_frames + 1
        sec = sec + frameRate
        sec = round(sec, 2)
        success_frames = getFrame(sec)
        mypath = "folder path where images are stored"
        onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]
        images = numpy.empty(len(onlyfiles), dtype=object)
        open_count = 0
        closed_count=0
        for n in range(0, len(onlyfiles)):
            images[n] = cv2.imread(join(mypath, onlyfiles[n]))
            frame = cv2.cvtColor(images[n], cv2.COLOR_BGR2GRAY)
            faces = face_Cascade.detectMultiScale(frame, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
            for (x, y, w, h) in faces:
                cv2.rectangle(images[n], (x, y), (x + w, y + h), (0, 255, 0), 2)
                eyes = eye_Cascade.detectMultiScale(frame, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
                if len(eyes) == 0:
                    print('(%d)closed'%count_frames)
                    closed_count += 1
                    if closed_count < 3 and closed_count != 0:
                        print(' eyes blinking')
                    if open_count>3:
                        closed_count=0
                    if closed_count > 3:
                        print('sleep detected')
                        sound.play()
                        cv2.destroyAllWindows()
                        vidObj.release

                else:
                    print('(%d)eyes!!!'%count_frames)
                    open_count+=1
                    if closed_count>3:
                        open_count=0


    cv2.destroyAllWindows()
    vidObj.release
